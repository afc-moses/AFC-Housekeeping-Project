{"ast":null,"code":"var _jsxFileName = \"/Users/mosesle/Desktop/afc-housekeeping-project/frontend/src/CleaningTasksList.js\",\n  _s = $RefreshSig$();\n// frontend/src/CleaningTasksList.js\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CleaningTasksList() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n\n  // Fetch cleaning tasks from the backend\n  const fetchTasks = () => {\n    axios.get('http://localhost:5001/api/cleaning-schedule').then(response => setTasks(response.data)).catch(error => console.error('Error fetching cleaning tasks:', error));\n  };\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  // Handler to mark a task as complete or incomplete\n  const handleMarkComplete = (taskId, completed) => {\n    axios.put(`http://localhost:5001/api/cleaning-schedule/task/${taskId}`, {\n      completed\n    }).then(response => {\n      alert(response.data.message);\n      fetchTasks();\n    }).catch(error => console.error('Error updating task:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Cleaning Tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), tasks.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No cleaning tasks found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Room:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 15\n        }, this), \" \", task.room, \", \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 51\n        }, this), \" \", task.cleaningDate, \", \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Status:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 95\n        }, this), \" \", task.completed ? 'Completed' : 'Pending', !task.completed && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleMarkComplete(task.taskId, true),\n          children: \"Mark as Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }, this)]\n      }, task.taskId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(CleaningTasksList, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c = CleaningTasksList;\nexport default CleaningTasksList;\nvar _c;\n$RefreshReg$(_c, \"CleaningTasksList\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","CleaningTasksList","_s","tasks","setTasks","fetchTasks","get","then","response","data","catch","error","console","handleMarkComplete","taskId","completed","put","alert","message","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","task","room","cleaningDate","onClick","_c","$RefreshReg$"],"sources":["/Users/mosesle/Desktop/afc-housekeeping-project/frontend/src/CleaningTasksList.js"],"sourcesContent":["// frontend/src/CleaningTasksList.js\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nfunction CleaningTasksList() {\n  const [tasks, setTasks] = useState([]);\n\n  // Fetch cleaning tasks from the backend\n  const fetchTasks = () => {\n    axios.get('http://localhost:5001/api/cleaning-schedule')\n      .then(response => setTasks(response.data))\n      .catch(error => console.error('Error fetching cleaning tasks:', error));\n  };\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  // Handler to mark a task as complete or incomplete\n  const handleMarkComplete = (taskId, completed) => {\n    axios.put(`http://localhost:5001/api/cleaning-schedule/task/${taskId}`, { completed })\n      .then(response => {\n        alert(response.data.message);\n        fetchTasks();\n      })\n      .catch(error => console.error('Error updating task:', error));\n  };\n\n  return (\n    <div>\n      <h2>Cleaning Tasks</h2>\n      {tasks.length === 0 ? (\n        <p>No cleaning tasks found.</p>\n      ) : (\n        <ul>\n          {tasks.map(task => (\n            <li key={task.taskId}>\n              <strong>Room:</strong> {task.room}, <strong>Date:</strong> {task.cleaningDate}, <strong>Status:</strong> {task.completed ? 'Completed' : 'Pending'}\n              {!task.completed && (\n                <button onClick={() => handleMarkComplete(task.taskId, true)}>Mark as Completed</button>\n              )}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nexport default CleaningTasksList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}