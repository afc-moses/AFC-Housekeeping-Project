{"ast":null,"code":"var _jsxFileName = \"/Users/mosesle/Desktop/afc-housekeeping-project/frontend/src/HousekeepingDashboard.js\",\n  _s = $RefreshSig$();\n// frontend/src/HousekeepingDashboard.js\nimport React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nfunction HousekeepingDashboard() {\n  _s();\n  const [reservations, setReservations] = useState([]);\n\n  // Fetch reservations from the backend\n  useEffect(() => {\n    axios.get('http://localhost:5001/api/reservations').then(response => setReservations(response.data)).catch(error => console.error('Error fetching reservations:', error));\n  }, []);\n\n  // Group reservations by check-out date and sum the number of rooms per date\n  const groupedData = useMemo(() => {\n    const groups = {};\n    reservations.forEach(res => {\n      if (res.checkOut && res.rooms) {\n        // Extract the date portion (YYYY-MM-DD) from checkOut\n        const checkOutDate = res.checkOut.slice(0, 10);\n        if (!groups[checkOutDate]) {\n          groups[checkOutDate] = 0;\n        }\n        groups[checkOutDate] += res.rooms.length;\n      }\n    });\n    // Sort the keys (dates) in ascending order\n    const sortedDates = Object.keys(groups).sort((a, b) => new Date(a) - new Date(b));\n    const dataValues = sortedDates.map(date => groups[date]);\n    return {\n      labels: sortedDates,\n      data: dataValues\n    };\n  }, [reservations]);\n\n  // Determine background colors based on the count for each check-out date\n  const backgroundColors = useMemo(() => {\n    return groupedData.data.map(count => {\n      if (count < 10) {\n        return 'rgba(75, 192, 75, 0.6)'; // green\n      } else if (count <= 20) {\n        return 'rgba(54, 162, 235, 0.6)'; // blue\n      } else if (count <= 30) {\n        return 'rgba(255, 99, 132, 0.6)'; // red\n      } else {\n        return 'rgba(201, 203, 207, 0.6)'; // gray for values above 30\n      }\n    });\n  }, [groupedData.data]);\n\n  // Build the chart data\n  const chartData = useMemo(() => {\n    return {\n      labels: groupedData.labels.length > 0 ? groupedData.labels : ['No Data'],\n      datasets: [{\n        label: 'Rooms to be Cleaned',\n        data: groupedData.data.length > 0 ? groupedData.data : [0],\n        backgroundColor: backgroundColors\n      }]\n    };\n  }, [groupedData, backgroundColors]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: '900px',\n      margin: 'auto',\n      padding: '20px',\n      fontFamily: 'Arial, sans-serif'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textAlign: 'center',\n        color: '#333'\n      },\n      children: \"Housekeeping Ministry Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData,\n      options: {\n        plugins: {\n          legend: {\n            display: false\n          },\n          title: {\n            display: true,\n            text: 'Check-Out Day - Rooms to be Cleaned'\n          }\n        },\n        responsive: true,\n        scales: {\n          x: {\n            ticks: {\n              autoSkip: false,\n              maxRotation: 90,\n              minRotation: 45\n            }\n          },\n          y: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: 'Number of Rooms'\n            }\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(HousekeepingDashboard, \"+bDeagUZQuXKWKD86vYQrTJKTMY=\");\n_c = HousekeepingDashboard;\nexport default HousekeepingDashboard;\nvar _c;\n$RefreshReg$(_c, \"HousekeepingDashboard\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","axios","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","Bar","jsxDEV","_jsxDEV","register","HousekeepingDashboard","_s","reservations","setReservations","get","then","response","data","catch","error","console","groupedData","groups","forEach","res","checkOut","rooms","checkOutDate","slice","length","sortedDates","Object","keys","sort","a","b","Date","dataValues","map","date","labels","backgroundColors","count","chartData","datasets","label","backgroundColor","style","maxWidth","margin","padding","fontFamily","children","textAlign","color","fileName","_jsxFileName","lineNumber","columnNumber","options","plugins","legend","display","title","text","responsive","scales","x","ticks","autoSkip","maxRotation","minRotation","y","beginAtZero","_c","$RefreshReg$"],"sources":["/Users/mosesle/Desktop/afc-housekeeping-project/frontend/src/HousekeepingDashboard.js"],"sourcesContent":["// frontend/src/HousekeepingDashboard.js\nimport React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n} from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\n\n// Register Chart.js components\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\nfunction HousekeepingDashboard() {\n  const [reservations, setReservations] = useState([]);\n\n  // Fetch reservations from the backend\n  useEffect(() => {\n    axios.get('http://localhost:5001/api/reservations')\n      .then(response => setReservations(response.data))\n      .catch(error => console.error('Error fetching reservations:', error));\n  }, []);\n\n  // Group reservations by check-out date and sum the number of rooms per date\n  const groupedData = useMemo(() => {\n    const groups = {};\n    reservations.forEach(res => {\n      if (res.checkOut && res.rooms) {\n        // Extract the date portion (YYYY-MM-DD) from checkOut\n        const checkOutDate = res.checkOut.slice(0, 10);\n        if (!groups[checkOutDate]) {\n          groups[checkOutDate] = 0;\n        }\n        groups[checkOutDate] += res.rooms.length;\n      }\n    });\n    // Sort the keys (dates) in ascending order\n    const sortedDates = Object.keys(groups).sort((a, b) => new Date(a) - new Date(b));\n    const dataValues = sortedDates.map(date => groups[date]);\n    return { labels: sortedDates, data: dataValues };\n  }, [reservations]);\n\n  // Determine background colors based on the count for each check-out date\n  const backgroundColors = useMemo(() => {\n    return groupedData.data.map(count => {\n      if (count < 10) {\n        return 'rgba(75, 192, 75, 0.6)'; // green\n      } else if (count <= 20) {\n        return 'rgba(54, 162, 235, 0.6)'; // blue\n      } else if (count <= 30) {\n        return 'rgba(255, 99, 132, 0.6)'; // red\n      } else {\n        return 'rgba(201, 203, 207, 0.6)'; // gray for values above 30\n      }\n    });\n  }, [groupedData.data]);\n\n  // Build the chart data\n  const chartData = useMemo(() => {\n    return {\n      labels: groupedData.labels.length > 0 ? groupedData.labels : ['No Data'],\n      datasets: [\n        {\n          label: 'Rooms to be Cleaned',\n          data: groupedData.data.length > 0 ? groupedData.data : [0],\n          backgroundColor: backgroundColors,\n        }\n      ]\n    };\n  }, [groupedData, backgroundColors]);\n\n  return (\n    <div style={{ maxWidth: '900px', margin: 'auto', padding: '20px', fontFamily: 'Arial, sans-serif' }}>\n      <h2 style={{ textAlign: 'center', color: '#333' }}>Housekeeping Ministry Chart</h2>\n      <Bar\n        data={chartData}\n        options={{\n          plugins: {\n            legend: { display: false },\n            title: { display: true, text: 'Check-Out Day - Rooms to be Cleaned' }\n          },\n          responsive: true,\n          scales: {\n            x: {\n              ticks: {\n                autoSkip: false,\n                maxRotation: 90,\n                minRotation: 45,\n              }\n            },\n            y: {\n              beginAtZero: true,\n              title: { display: true, text: 'Number of Rooms' }\n            }\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport default HousekeepingDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}