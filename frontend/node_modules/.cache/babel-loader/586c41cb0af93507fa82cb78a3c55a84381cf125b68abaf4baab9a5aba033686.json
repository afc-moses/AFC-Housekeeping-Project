{"ast":null,"code":"var _jsxFileName = \"/Users/mosesle/Desktop/afc-housekeeping-project/frontend/src/UpcomingCleaningTasks.js\",\n  _s = $RefreshSig$();\n// frontend/src/UpcomingCleaningTasks.js\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UpcomingCleaningTasks() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n\n  // Fetch cleaning tasks from the backend\n  const fetchTasks = () => {\n    axios.get('http://localhost:5001/api/cleaning-schedule').then(response => setTasks(response.data)).catch(error => console.error('Error fetching cleaning tasks:', error));\n  };\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  // Get today's date in YYYY-MM-DD format\n  const today = new Date().toISOString().slice(0, 10);\n\n  // Filter tasks scheduled for today\n  const upcomingTasks = tasks.filter(task => task.cleaningDate === today);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Upcoming Cleaning Tasks for Today (\", today, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), upcomingTasks.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No cleaning tasks scheduled for today.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: upcomingTasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Room:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 15\n        }, this), \" \", task.room, \" - \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Status:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 52\n        }, this), \" \", task.completed ? 'Completed' : 'Pending']\n      }, task.taskId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_s(UpcomingCleaningTasks, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c = UpcomingCleaningTasks;\nexport default UpcomingCleaningTasks;\nvar _c;\n$RefreshReg$(_c, \"UpcomingCleaningTasks\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","UpcomingCleaningTasks","_s","tasks","setTasks","fetchTasks","get","then","response","data","catch","error","console","today","Date","toISOString","slice","upcomingTasks","filter","task","cleaningDate","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","room","completed","taskId","_c","$RefreshReg$"],"sources":["/Users/mosesle/Desktop/afc-housekeeping-project/frontend/src/UpcomingCleaningTasks.js"],"sourcesContent":["// frontend/src/UpcomingCleaningTasks.js\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nfunction UpcomingCleaningTasks() {\n  const [tasks, setTasks] = useState([]);\n\n  // Fetch cleaning tasks from the backend\n  const fetchTasks = () => {\n    axios.get('http://localhost:5001/api/cleaning-schedule')\n      .then(response => setTasks(response.data))\n      .catch(error => console.error('Error fetching cleaning tasks:', error));\n  };\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  // Get today's date in YYYY-MM-DD format\n  const today = new Date().toISOString().slice(0, 10);\n\n  // Filter tasks scheduled for today\n  const upcomingTasks = tasks.filter(task => task.cleaningDate === today);\n\n  return (\n    <div>\n      <h2>Upcoming Cleaning Tasks for Today ({today})</h2>\n      {upcomingTasks.length === 0 ? (\n        <p>No cleaning tasks scheduled for today.</p>\n      ) : (\n        <ul>\n          {upcomingTasks.map(task => (\n            <li key={task.taskId}>\n              <strong>Room:</strong> {task.room} - <strong>Status:</strong> {task.completed ? 'Completed' : 'Pending'}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nexport default UpcomingCleaningTasks;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,qBAAqBA,CAAA,EAAG;EAAAC,EAAA;EAC/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,MAAMQ,UAAU,GAAGA,CAAA,KAAM;IACvBP,KAAK,CAACQ,GAAG,CAAC,6CAA6C,CAAC,CACrDC,IAAI,CAACC,QAAQ,IAAIJ,QAAQ,CAACI,QAAQ,CAACC,IAAI,CAAC,CAAC,CACzCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC,CAAC;EAC3E,CAAC;EAEDf,SAAS,CAAC,MAAM;IACdS,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMQ,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;;EAEnD;EACA,MAAMC,aAAa,GAAGd,KAAK,CAACe,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,YAAY,KAAKP,KAAK,CAAC;EAEvE,oBACEb,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAAqB,QAAA,GAAI,qCAAmC,EAACR,KAAK,EAAC,GAAC;IAAA;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACnDR,aAAa,CAACS,MAAM,KAAK,CAAC,gBACzB1B,OAAA;MAAAqB,QAAA,EAAG;IAAsC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAE7CzB,OAAA;MAAAqB,QAAA,EACGJ,aAAa,CAACU,GAAG,CAACR,IAAI,iBACrBnB,OAAA;QAAAqB,QAAA,gBACErB,OAAA;UAAAqB,QAAA,EAAQ;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACN,IAAI,CAACS,IAAI,EAAC,KAAG,eAAA5B,OAAA;UAAAqB,QAAA,EAAQ;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACN,IAAI,CAACU,SAAS,GAAG,WAAW,GAAG,SAAS;MAAA,GADhGV,IAAI,CAACW,MAAM;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEhB,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACL;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACvB,EAAA,CApCQD,qBAAqB;AAAA8B,EAAA,GAArB9B,qBAAqB;AAsC9B,eAAeA,qBAAqB;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}