{"ast":null,"code":"// frontend/src/RoomAvailabilityPeriod.js\nimport React,{useState,useEffect}from'react';import axios from'axios';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function RoomAvailabilityPeriod(){const[reservations,setReservations]=useState([]);const[cleaningSchedule,setCleaningSchedule]=useState([]);const[startDate,setStartDate]=useState('');const[endDate,setEndDate]=useState('');const[datesInRange,setDatesInRange]=useState([]);// List of all hotel rooms\nconst hotelRooms=['105','107','109','110','111','112','113','114','115','116','117','118','119','120','205','206','207','208','209','210','211','212','213','214','215','216','217','218','219','220'];// Fetch reservations and cleaning tasks from the backend\nuseEffect(()=>{axios.get('http://localhost:5001/api/reservations').then(response=>setReservations(response.data)).catch(error=>console.error('Error fetching reservations:',error));axios.get('http://localhost:5001/api/cleaning-schedule').then(response=>setCleaningSchedule(response.data)).catch(error=>console.error('Error fetching cleaning schedule:',error));},[]);// Helper: get all dates in range (inclusive)\nconst getDatesInRange=(start,end)=>{const startDt=new Date(start);const endDt=new Date(end);const dates=[];let current=new Date(startDt);while(current<=endDt){dates.push(current.toISOString().slice(0,10));current.setDate(current.getDate()+1);}return dates;};// When user clicks \"Show Availability\"\nconst handleShowAvailability=()=>{if(startDate&&endDate&&startDate<=endDate){const dates=getDatesInRange(startDate,endDate);setDatesInRange(dates);}else{alert(\"Please enter a valid date range.\");}};// Check if a room is available on a given date\nconst isRoomAvailableOn=(room,date)=>{// Iterate over each reservation for the room\nfor(let res of reservations){if(res.rooms.includes(room)){// If the date falls within the reservation period [checkIn, checkOut)\nif(date>=res.checkIn&&date<res.checkOut){return false;}// If the date is exactly the checkOut date, room is available only if cleaned.\nif(date===res.checkOut){const cleaningTask=cleaningSchedule.find(task=>task.reservationId===res.id&&task.cleaningDate===date);if(!(cleaningTask&&cleaningTask.completed)){return false;}}}}return true;};return/*#__PURE__*/_jsxs(\"div\",{style:{maxWidth:'90%',margin:'auto',padding:'20px'},children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Room Availability for a Selected Period\"}),/*#__PURE__*/_jsxs(\"div\",{style:{marginBottom:'20px'},children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Start Date:\",/*#__PURE__*/_jsx(\"input\",{type:\"date\",value:startDate,onChange:e=>setStartDate(e.target.value),style:{marginLeft:'8px'}})]}),/*#__PURE__*/_jsxs(\"label\",{style:{marginLeft:'20px'},children:[\"End Date:\",/*#__PURE__*/_jsx(\"input\",{type:\"date\",value:endDate,onChange:e=>setEndDate(e.target.value),style:{marginLeft:'8px'}})]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleShowAvailability,style:{marginLeft:'20px',padding:'8px 16px'},children:\"Show Availability\"})]}),datesInRange.length>0&&/*#__PURE__*/_jsxs(\"table\",{border:\"1\",cellPadding:\"8\",style:{borderCollapse:'collapse',width:'100%'},children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Room\"}),datesInRange.map(date=>/*#__PURE__*/_jsx(\"th\",{children:date},date))]})}),/*#__PURE__*/_jsx(\"tbody\",{children:hotelRooms.map(room=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:room}),datesInRange.map(date=>{const available=isRoomAvailableOn(room,date);return/*#__PURE__*/_jsx(\"td\",{style:{backgroundColor:available?'#d4edda':'#f8d7da',textAlign:'center'},children:available?'Available':'Not Available'},date);})]},room))})]})]});}export default RoomAvailabilityPeriod;","map":{"version":3,"names":["React","useState","useEffect","axios","jsx","_jsx","jsxs","_jsxs","RoomAvailabilityPeriod","reservations","setReservations","cleaningSchedule","setCleaningSchedule","startDate","setStartDate","endDate","setEndDate","datesInRange","setDatesInRange","hotelRooms","get","then","response","data","catch","error","console","getDatesInRange","start","end","startDt","Date","endDt","dates","current","push","toISOString","slice","setDate","getDate","handleShowAvailability","alert","isRoomAvailableOn","room","date","res","rooms","includes","checkIn","checkOut","cleaningTask","find","task","reservationId","id","cleaningDate","completed","style","maxWidth","margin","padding","children","marginBottom","type","value","onChange","e","target","marginLeft","onClick","length","border","cellPadding","borderCollapse","width","map","available","backgroundColor","textAlign"],"sources":["/Users/mosesle/Desktop/afc-housekeeping-project/frontend/src/RoomAvailability.js"],"sourcesContent":["// frontend/src/RoomAvailabilityPeriod.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction RoomAvailabilityPeriod() {\n  const [reservations, setReservations] = useState([]);\n  const [cleaningSchedule, setCleaningSchedule] = useState([]);\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [datesInRange, setDatesInRange] = useState([]);\n\n  // List of all hotel rooms\n  const hotelRooms = [\n    '105', '107', '109',\n    '110', '111', '112', '113', '114', '115', '116', '117', '118', '119', '120',\n    '205', '206', '207', '208', '209', '210', '211', '212', '213', '214', '215', '216', '217', '218', '219', '220'\n  ];\n\n  // Fetch reservations and cleaning tasks from the backend\n  useEffect(() => {\n    axios.get('http://localhost:5001/api/reservations')\n      .then(response => setReservations(response.data))\n      .catch(error => console.error('Error fetching reservations:', error));\n\n    axios.get('http://localhost:5001/api/cleaning-schedule')\n      .then(response => setCleaningSchedule(response.data))\n      .catch(error => console.error('Error fetching cleaning schedule:', error));\n  }, []);\n\n  // Helper: get all dates in range (inclusive)\n  const getDatesInRange = (start, end) => {\n    const startDt = new Date(start);\n    const endDt = new Date(end);\n    const dates = [];\n    let current = new Date(startDt);\n    while (current <= endDt) {\n      dates.push(current.toISOString().slice(0, 10));\n      current.setDate(current.getDate() + 1);\n    }\n    return dates;\n  };\n\n  // When user clicks \"Show Availability\"\n  const handleShowAvailability = () => {\n    if (startDate && endDate && startDate <= endDate) {\n      const dates = getDatesInRange(startDate, endDate);\n      setDatesInRange(dates);\n    } else {\n      alert(\"Please enter a valid date range.\");\n    }\n  };\n\n  // Check if a room is available on a given date\n  const isRoomAvailableOn = (room, date) => {\n    // Iterate over each reservation for the room\n    for (let res of reservations) {\n      if (res.rooms.includes(room)) {\n        // If the date falls within the reservation period [checkIn, checkOut)\n        if (date >= res.checkIn && date < res.checkOut) {\n          return false;\n        }\n        // If the date is exactly the checkOut date, room is available only if cleaned.\n        if (date === res.checkOut) {\n          const cleaningTask = cleaningSchedule.find(\n            task => task.reservationId === res.id && task.cleaningDate === date\n          );\n          if (!(cleaningTask && cleaningTask.completed)) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  };\n\n  return (\n    <div style={{ maxWidth: '90%', margin: 'auto', padding: '20px' }}>\n      <h2>Room Availability for a Selected Period</h2>\n      <div style={{ marginBottom: '20px' }}>\n        <label>\n          Start Date:\n          <input \n            type=\"date\" \n            value={startDate} \n            onChange={e => setStartDate(e.target.value)} \n            style={{ marginLeft: '8px' }}\n          />\n        </label>\n        <label style={{ marginLeft: '20px' }}>\n          End Date:\n          <input \n            type=\"date\" \n            value={endDate} \n            onChange={e => setEndDate(e.target.value)} \n            style={{ marginLeft: '8px' }}\n          />\n        </label>\n        <button \n          onClick={handleShowAvailability} \n          style={{ marginLeft: '20px', padding: '8px 16px' }}\n        >\n          Show Availability\n        </button>\n      </div>\n      {datesInRange.length > 0 && (\n        <table border=\"1\" cellPadding=\"8\" style={{ borderCollapse: 'collapse', width: '100%' }}>\n          <thead>\n            <tr>\n              <th>Room</th>\n              {datesInRange.map(date => (\n                <th key={date}>{date}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {hotelRooms.map(room => (\n              <tr key={room}>\n                <td>{room}</td>\n                {datesInRange.map(date => {\n                  const available = isRoomAvailableOn(room, date);\n                  return (\n                    <td \n                      key={date} \n                      style={{ \n                        backgroundColor: available ? '#d4edda' : '#f8d7da',\n                        textAlign: 'center'\n                      }}\n                    >\n                      {available ? 'Available' : 'Not Available'}\n                    </td>\n                  );\n                })}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n}\n\nexport default RoomAvailabilityPeriod;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}