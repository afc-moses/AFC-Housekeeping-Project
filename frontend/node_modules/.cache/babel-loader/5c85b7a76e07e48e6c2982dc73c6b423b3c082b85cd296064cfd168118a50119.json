{"ast":null,"code":"// frontend/src/CleaningTasksList.js\nimport React,{useState,useEffect}from'react';import axios from'axios';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function CleaningTasksList(){const[tasks,setTasks]=useState([]);const[reservations,setReservations]=useState([]);const[expandedReservation,setExpandedReservation]=useState(null);// Fetch cleaning tasks and reservations when component mounts\nuseEffect(()=>{axios.get('http://localhost:5001/api/cleaning-schedule').then(response=>setTasks(response.data)).catch(error=>console.error('Error fetching cleaning tasks:',error));axios.get('http://localhost:5001/api/reservations').then(response=>setReservations(response.data)).catch(error=>console.error('Error fetching reservations:',error));},[]);// Merge each cleaning task with its corresponding reservation details\nconst mergedTasks=tasks.map(task=>{const reservation=reservations.find(r=>r.id===Number(task.reservationId));return{...task,reservation};});// Group tasks by reservationId\nconst groupedByReservation=mergedTasks.reduce((groups,task)=>{const resId=task.reservationId;if(!groups[resId]){groups[resId]=[];}groups[resId].push(task);return groups;},{});// Sort reservation groups by the check-out date of the first task in each group\nconst sortedReservationIds=Object.keys(groupedByReservation).sort((a,b)=>{const dateA=new Date(groupedByReservation[a][0].cleaningDate);const dateB=new Date(groupedByReservation[b][0].cleaningDate);return dateA-dateB;});// Toggle expanded view for a reservation group\nconst toggleExpanded=resId=>{setExpandedReservation(prev=>prev===resId?null:resId);};// Handler to mark a specific cleaning task as cleaned\nconst markTaskCleaned=taskId=>{axios.put(`http://localhost:5001/api/cleaning-schedule/task/${taskId}`,{completed:true}).then(response=>{alert(response.data.message);// Refresh tasks after updating\naxios.get('http://localhost:5001/api/cleaning-schedule').then(resp=>setTasks(resp.data)).catch(err=>console.error('Error refreshing tasks:',err));}).catch(error=>console.error('Error updating task:',error));};return/*#__PURE__*/_jsxs(\"div\",{style:{maxWidth:'800px',margin:'auto',padding:'20px',fontFamily:'Arial, sans-serif'},children:[/*#__PURE__*/_jsx(\"h2\",{style:{textAlign:'center',color:'#333'},children:\"Cleaning Tasks\"}),sortedReservationIds.length===0?/*#__PURE__*/_jsx(\"p\",{style:{textAlign:'center'},children:\"No cleaning tasks found.\"}):sortedReservationIds.map(resId=>{const tasksForRes=groupedByReservation[resId];const reservation=tasksForRes[0].reservation;return/*#__PURE__*/_jsxs(\"div\",{style:{marginBottom:'20px',border:'1px solid #ccc',borderRadius:'8px',padding:'15px',backgroundColor:'#fff',boxShadow:'0 2px 6px rgba(0,0,0,0.1)'},children:[/*#__PURE__*/_jsxs(\"div\",{onClick:()=>toggleExpanded(resId),style:{cursor:'pointer',display:'flex',justifyContent:'space-between',alignItems:'center'},children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{style:{margin:'0',color:'#007BFF'},children:reservation?reservation.customerName:'Unknown Reservation'}),reservation&&/*#__PURE__*/_jsxs(\"p\",{style:{margin:'4px 0',fontSize:'14px',color:'#555'},children:[reservation.email,\" | \",reservation.phone]}),/*#__PURE__*/_jsxs(\"p\",{style:{margin:'4px 0 0',fontSize:'14px',color:'#555'},children:[\"Check-Out: \",tasksForRes[0].cleaningDate,\" 11:00 AM\"]})]}),/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'18px',color:'#007BFF'},children:expandedReservation===resId?'▲':'▼'})]}),expandedReservation===resId&&/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'10px'},children:[/*#__PURE__*/_jsx(\"p\",{style:{fontWeight:'bold'},children:\"Rooms to Clean:\"}),/*#__PURE__*/_jsx(\"ul\",{style:{listStyle:'none',padding:0},children:tasksForRes.map(task=>/*#__PURE__*/_jsxs(\"li\",{style:{marginBottom:'10px',display:'flex',justifyContent:'space-between',alignItems:'center'},children:[/*#__PURE__*/_jsxs(\"span\",{style:{fontSize:'15px'},children:[\"Room \",task.room,\" - \",task.completed?'Cleaned':'Pending']}),!task.completed&&/*#__PURE__*/_jsx(\"button\",{onClick:()=>markTaskCleaned(task.taskId),style:{padding:'6px 10px',backgroundColor:'#28a745',color:'#fff',border:'none',borderRadius:'4px',cursor:'pointer',fontSize:'14px'},children:\"Mark as Cleaned\"})]},task.taskId))})]})]},resId);})]});}export default CleaningTasksList;","map":{"version":3,"names":["React","useState","useEffect","axios","jsx","_jsx","jsxs","_jsxs","CleaningTasksList","tasks","setTasks","reservations","setReservations","expandedReservation","setExpandedReservation","get","then","response","data","catch","error","console","mergedTasks","map","task","reservation","find","r","id","Number","reservationId","groupedByReservation","reduce","groups","resId","push","sortedReservationIds","Object","keys","sort","a","b","dateA","Date","cleaningDate","dateB","toggleExpanded","prev","markTaskCleaned","taskId","put","completed","alert","message","resp","err","style","maxWidth","margin","padding","fontFamily","children","textAlign","color","length","tasksForRes","marginBottom","border","borderRadius","backgroundColor","boxShadow","onClick","cursor","display","justifyContent","alignItems","customerName","fontSize","email","phone","marginTop","fontWeight","listStyle","room"],"sources":["/Users/mosesle/Desktop/afc-housekeeping-project/frontend/src/CleaningTasksList.js"],"sourcesContent":["// frontend/src/CleaningTasksList.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction CleaningTasksList() {\n  const [tasks, setTasks] = useState([]);\n  const [reservations, setReservations] = useState([]);\n  const [expandedReservation, setExpandedReservation] = useState(null);\n\n  // Fetch cleaning tasks and reservations when component mounts\n  useEffect(() => {\n    axios.get('http://localhost:5001/api/cleaning-schedule')\n      .then(response => setTasks(response.data))\n      .catch(error => console.error('Error fetching cleaning tasks:', error));\n\n    axios.get('http://localhost:5001/api/reservations')\n      .then(response => setReservations(response.data))\n      .catch(error => console.error('Error fetching reservations:', error));\n  }, []);\n\n  // Merge each cleaning task with its corresponding reservation details\n  const mergedTasks = tasks.map(task => {\n    const reservation = reservations.find(r => r.id === Number(task.reservationId));\n    return { ...task, reservation };\n  });\n\n  // Group tasks by reservationId\n  const groupedByReservation = mergedTasks.reduce((groups, task) => {\n    const resId = task.reservationId;\n    if (!groups[resId]) {\n      groups[resId] = [];\n    }\n    groups[resId].push(task);\n    return groups;\n  }, {});\n\n  // Sort reservation groups by the check-out date of the first task in each group\n  const sortedReservationIds = Object.keys(groupedByReservation).sort((a, b) => {\n    const dateA = new Date(groupedByReservation[a][0].cleaningDate);\n    const dateB = new Date(groupedByReservation[b][0].cleaningDate);\n    return dateA - dateB;\n  });\n\n  // Toggle expanded view for a reservation group\n  const toggleExpanded = (resId) => {\n    setExpandedReservation(prev => (prev === resId ? null : resId));\n  };\n\n  // Handler to mark a specific cleaning task as cleaned\n  const markTaskCleaned = (taskId) => {\n    axios.put(`http://localhost:5001/api/cleaning-schedule/task/${taskId}`, { completed: true })\n      .then(response => {\n        alert(response.data.message);\n        // Refresh tasks after updating\n        axios.get('http://localhost:5001/api/cleaning-schedule')\n          .then(resp => setTasks(resp.data))\n          .catch(err => console.error('Error refreshing tasks:', err));\n      })\n      .catch(error => console.error('Error updating task:', error));\n  };\n\n  return (\n    <div style={{ maxWidth: '800px', margin: 'auto', padding: '20px', fontFamily: 'Arial, sans-serif' }}>\n      <h2 style={{ textAlign: 'center', color: '#333' }}>Cleaning Tasks</h2>\n      {sortedReservationIds.length === 0 ? (\n        <p style={{ textAlign: 'center' }}>No cleaning tasks found.</p>\n      ) : (\n        sortedReservationIds.map(resId => {\n          const tasksForRes = groupedByReservation[resId];\n          const reservation = tasksForRes[0].reservation;\n          return (\n            <div key={resId} style={{ marginBottom: '20px', border: '1px solid #ccc', borderRadius: '8px', padding: '15px', backgroundColor: '#fff', boxShadow: '0 2px 6px rgba(0,0,0,0.1)' }}>\n              {/* Reservation summary header */}\n              <div onClick={() => toggleExpanded(resId)} style={{ cursor: 'pointer', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                <div>\n                  <h3 style={{ margin: '0', color: '#007BFF' }}>\n                    {reservation ? reservation.customerName : 'Unknown Reservation'}\n                  </h3>\n                  {reservation && (\n                    <p style={{ margin: '4px 0', fontSize: '14px', color: '#555' }}>\n                      {reservation.email} | {reservation.phone}\n                    </p>\n                  )}\n                  <p style={{ margin: '4px 0 0', fontSize: '14px', color: '#555' }}>\n                    Check-Out: {tasksForRes[0].cleaningDate} 11:00 AM\n                  </p>\n                </div>\n                <div style={{ fontSize: '18px', color: '#007BFF' }}>\n                  {expandedReservation === resId ? '▲' : '▼'}\n                </div>\n              </div>\n              {/* Expanded list of tasks */}\n              {expandedReservation === resId && (\n                <div style={{ marginTop: '10px' }}>\n                  <p style={{ fontWeight: 'bold' }}>Rooms to Clean:</p>\n                  <ul style={{ listStyle: 'none', padding: 0 }}>\n                    {tasksForRes.map(task => (\n                      <li key={task.taskId} style={{ marginBottom: '10px', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                        <span style={{ fontSize: '15px' }}>\n                          Room {task.room} - {task.completed ? 'Cleaned' : 'Pending'}\n                        </span>\n                        {!task.completed && (\n                          <button \n                            onClick={() => markTaskCleaned(task.taskId)}\n                            style={{ padding: '6px 10px', backgroundColor: '#28a745', color: '#fff', border: 'none', borderRadius: '4px', cursor: 'pointer', fontSize: '14px' }}\n                          >\n                            Mark as Cleaned\n                          </button>\n                        )}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n            </div>\n          );\n        })\n      )}\n    </div>\n  );\n}\n\nexport default CleaningTasksList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}